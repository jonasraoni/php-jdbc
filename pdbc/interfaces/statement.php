<?php
/*
* @author Jonas Raoni
* @url https://github.com/jonasraoni/php-jdbc
* @version $Id: statement.php,v 1.0 2006/05/09 18:58:07
* @abstract The object used for executing a static SQL statement and returning the results it produces
*/

class Statement{
	/**
	* Constructor
	* @param Connection $connection
	* @param Integer $resultSetType
	* @param Integer $resultSetConcurrency
	* @param Integer $resultSetHoldability
	*/
	function &MySQLStatement(&$connection, $resultSetType, $resultSetConcurrency, $resultSetHoldability){
		die('Not implemented');
	}

	/**
	* Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval
	* @param String $sql
	* @param Integer/String[]/Integer[] $autoGeneratedKeysOrColumnIndexesOrNames
	* @return Boolean
	*/
	function execute($sql, $autoGeneratedKeysOrColumnIndexesOrNames = null){
		die('Not implemented');
	}

	/**
	* Executes the given SQL statement, which returns a single ResultSet object
	* @param String $sql
	* @return ResultSet
	*/
	function &executeQuery($sql){
		die('Not implemented');
	}

	/**
	* Executes the given SQL statement and signals the driver with the given flag about whether the auto-generated keys produced by this Statement object should be made available for retrieval
	* @param String $sql
	* @param Integer/String[]/Integer[] $autoGeneratedKeysOrColumnIndexesOrNames
	* @return Integer
	*/
	function executeUpdate($sql, $autoGeneratedKeysOrColumnIndexesOrNames = null){
		die('Not implemented');
	}

	/**
	* Releases this Statement object's database and JDBC resources immediately instead of waiting for this to happen when it is automatically closed
	* @return void
	*/
	function close(){
		die('Not implemented');
	}

	/**
	* Retrieves the maximum number of bytes that can be returned for character and binary column values in a ResultSet object produced by this Statement object
	* @return Integer
	*/
	function getMaxFieldSize(){
		die('Not implemented');
	}

	/**
	* Sets the limit for the maximum number of bytes that can be returned for character and binary column values in a ResultSet  object produced by this Statement object
	* @param Integer $max
	* @return void
	*/
	function setMaxFieldSize($max){
		die('Not implemented');
	}

	/**
	* Retrieves the maximum number of rows that a ResultSet object produced by this Statement object can contain
	* @return Integer
	*/
	function getMaxRows(){
		die('Not implemented');
	}

	/**
	* Sets escape processing on or off
	* @param Boolean $enable
	* @return void
	*/
	function setEscapeProcessing($enable){
		die('Not implemented');
	}

	/**
	* Retrieves the number of seconds the driver will wait for a Statement object to execute
	* @return Integer
	*/
	function getQueryTimeout(){
		die('Not implemented');
	}

	/**
	* Sets the number of seconds the driver will wait for a Statement object to execute to the given number of seconds
	* @param Integer $seconds
	* @return void
	*/
	function setQueryTimeout($seconds){
		die('Not implemented');
	}

	/**
	* Cancels this Statement object if both the DBMS and driver support aborting an SQL statement
	* @return void
	*/
	function cancel(){
		die('Cancelling statements isn\'t supported');
	}

	/**
	* Retrieves the first warning reported by calls on this Statement object
	* @return SQLWarning
	*/
	function &getWarnings(){
		die('Not implemented');
	}

	/**
	* Clears all the warnings reported on this Statement  object
	* @return void
	*/
	function clearWarnings(){
		die('Not implemented');
	}

	/**
	* Sets the SQL cursor name to the given String, which will be used by subsequent Statement object execute methods
	* @param String $name
	* @return void
	*/
	function setCursorName($name){
		die('Cursors aren\'t supported');
	}

	/**
	* Retrieves the current result as a ResultSet object
	* @return ResultSet
	*/
	function &getResultSet(){
		die('Not implemented');
	}

	/**
	* Retrieves the current result as an update count; if the result is a ResultSet object or there are no more results, -1 is returned
	* @return Integer
	*/
	function getUpdateCount(){
		die('Not implemented');
	}

	/**
	* Moves to this Statement object's next result, deals with any current ResultSet object(s) according to the instructions specified by the given flag, and returns true if the next result is a ResultSet object
	* @param Integer $current
	* @return Boolean
	*/
	function getMoreResults($current = CLOSE_CURRENT_RESULT){
		die('Not implemented');
	}

	/**
	* Gives the driver a hint as to the direction in which rows will be processed in ResultSet objects created using this Statement object
	* @param Integer $direction
	* @return void
	*/
	function setFetchDirection($direction){
		die('Not implemented');
	}

	/**
	* Retrieves the direction for fetching rows from database tables that is the default for result sets generated from this Statement object
	* @return Integer
	*/
	function getFetchDirection(){
		die('Not implemented');
	}

	/**
	* Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed for ResultSet objects genrated by this Statement
	* @param Integer $rows
	* @return void
	*/
	function setFetchSize($rows){
		die('Not implemented');
	}

	/**
	* Retrieves the number of result set rows that is the default fetch size for ResultSet objects generated from this Statement object
	* @return Integer
	*/
	function getFetchSize(){
		die('Not implemented');
	}

	/**
	* Retrieves the result set concurrency for ResultSet objects generated by this Statement object
	* @return Integer
	*/
	function getResultSetConcurrency(){
		die('Not implemented');
	}

	/**
	* Retrieves the result set type for ResultSet objects generated by this Statement object
	* @return Integer
	*/
	function getResultSetType(){
		die('Not implemented');
	}

	/**
	* Adds the given SQL command to the current list of commmands for this Statement object
	* @param String $sql
	* @return void
	*/
	function addBatch($sql){
		die('Not implemented');
	}

	/**
	* Empties this Statement object's current list of SQL commands.
	* @return void
	*/
	function clearBatch(){
		die('Not implemented');
	}

	/**
	* Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts.
	* @return Integer[]
	*/
	function executeBatch(){
		die('Not implemented');
	}

	/**
	* Retrieves the Connection object that produced this Statement object
	* @return Connection
	*/
	function &getConnection(){
		die('Not implemented');
	}

	/**
	* Retrieves any auto-generated keys created as a result of executing this Statement object
	* @return ResultSet
	*/
	function &getGeneratedKeys(){
		die('Not implemented');
	}

	/**
	* Retrieves the result set holdability for ResultSet objects generated by this Statement object
	* @return Integer
	*/
	function getResultSetHoldability(){
		die('Not implemented');
	}

	/**
	* Retrieves whether this Statement object has been closed
	* @return Boolean
	*/
	function isClosed(){
		die('Not implemented');
	}
}
?>