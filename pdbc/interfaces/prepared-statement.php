<?php
/*
* @author Jonas Raoni
* @url https://github.com/jonasraoni/php-jdbc
* @version $Id: prepared-statement.php,v 1.0 2006/05/09 18:58:07
* @abstract An object that represents a precompiled SQL statement
*/

require_once PDBC_INTERFACES . 'statement.php';

class PreparedStatement extends Statement{
	/**
	* Class constructor
	* @param Connection $connection
	* @param String $sql
	* @param Integer $resultSetType
	* @param Integer $resultSetConcurrency
	* @param Integer $resultSetHoldability
	*/
	function &PreparedStatement(&$connection, $sql, $resultSetType, $resultSetConcurrency, $resultSetHoldability){
		die('Not implemented');
	}

	/**
	* Adds a set of parameters to this PreparedStatement object's batch of commands
	* @return void
	*/
	function addBatch(){
		die('Not implemented');
	}

 	/**
	* Clears the current parameter values immediately
	* @return void
	*/
	function clearParameters(){
		die('Not implemented');
	}

	/**
	* Executes the SQL statement in this PreparedStatement object, which may be any kind of SQL statement
	* @return Boolean
	*/
	function execute(){
		die('Not implemented');
	}

	/**
	* Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query
	* @return ResultSet
	*/
	function &executeQuery(){
		die('Not implemented');
	}

	/**
	* Executes the SQL statement in this PreparedStatement object, which must be an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement
	* @return Integer
	*/
	function executeUpdate(){
		die('Not implemented');
	}

	/**
	* Retrieves a ResultSetMetaData object that contains information about the columns of the ResultSet object that will be returned when this PreparedStatement object is executed
	* @return ResultSetMetaData
	*/
	function &getMetaData(){
		die('Not implemented');
	}

	/**
	* Retrieves the number, types and properties of this PreparedStatement object's parameters
	* @return ParameterMetaData
	*/
	function &getParameterMetaData(){
		die('Not implemented');
	}

	/**
	* Returns the value of the statements poolable hint, indicating whether pooling of the statement is requested
	* @return Noolean
	*/
	function isPoolable(){
		die('Not implemented');
	}

 	/**
	* Requests that a PreparedStatement be pooled or not pooled
	* @param Integer $index
	* @param Boolean $poolable
	* @return void
	*/
	function setPoolable($poolable){
		die('Not implemented');
	}

	/**
	* Sets the designated parameter to the given java.sql.Array object
	* @param Integer $index
	* @param Array $value
	* @return void
	*/
	function setArray($index, $value){
		die('Not implemented');
	}

	/**
	* Sets the designated parameter to the given input stream, which will have the specified number of bytes
	* @param Integer $index
	* @param InputStream $value
	* @param Integer $length
	* @return void
	*/
	function setAsciiStream($index, &$value, $length){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given java.math.BigDecimal value
	* @param Integer $index
	* @param BigDecimal $value
	* @return void
	*/
	function setBigDecimal($index, &$value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given input stream, which will have the specified number of bytes
	* @param Integer $index
	* @param InputStream $value
	* @param Integer $length
	* @return void
	*/
	function setBinaryStream($index, &$value, $length){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given java.sql.Blob object
	* @param Integer $index
	* @param Blob $value
	* @return void
	*/
	function setBlob($index, &$value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to a InputStream object
	* @param Integer $index
	* @param InputStream $value
	* @param Long $length
	* @return void
	*/
	function setBlob($index, &$value, $length){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given Java boolean value
	* @param Integer $index
	* @param Boolean $value
	* @return void
	*/
	function setBoolean($index, $value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given Java byte value
	* @param Integer $index
	* @param Integer $value
	* @return void
	*/
	function setByte($index, $value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given Java array of bytes
	* @param Integer $index
	* @param Integer[] $value
	* @return void
	*/
	function setBytes($index, $value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given Reader object, which is the given number of characters long
	* @param Integer $index
	* @param Reader $value
	* @param Integer $length
	* @return void
	*/
	function setCharacterStream($index, $value, $length){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given java.sql.Clob object
	* @param Integer $index
	* @param Clob $value
	* @return void
	*/
	function setClob($index, $value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to a Reader object
	* @param Integer $index
	* @param Reader $value
	* @param Long $length
	* @return void
	*/
	function setClob($index, $reader, $length){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application
	* @param Integer $index
	* @param Date $value
	* @return void
	*/
	function setDate($index, $value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given Java double value
	* @param Integer $index
	* @param Float $value
	* @return void
	*/
	function setDouble($index, $value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given Java float value
	* @param Integer $index
	* @param Float $value
	* @return void
	*/
	function setFloat($index, $value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given Java int value
	* @param Integer $index
	* @param Integer $value
	* @return void
	*/
	function setInt($index, $value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given Java long value
	* @param Integer $index
	* @param Integer $value
	* @return void
	*/
	function setLong($index, $value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to a Reader object
	* @param Integer $index
	* @param Reader $value
	* @param Long $length
	* @return void
	*/
	function setNCharacterStream($index, $value, $length){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to a java.sql.NClob object
	* @param Integer $index
	* @param NClob $value
	* @return void
	*/
	function setNClob($index, $value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to a Reader object
	* @param Integer $index
	* @param Reader $value
	* @param Long $length
	* @return void
	*/
	function setNClob($index, $value, $length){
		die('Not implemented');
	}

 	/**
	* Sets the designated paramter to the given String object
	* @param Integer $index
	* @param String $value
	* @return void
	*/
	function setNString($index, $value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to SQL NULL
	* @param Integer $index
	* @param Integer $sqlType
	* @param String $typeName
	* @return void
	*/
	function setNull($index, $sqlType = null, $typeName = null){
		die('Not implemented');
	}

 	/**
	* Sets the value of the designated parameter with the given object
	* @param Integer $index
	* @param Object $value
	* @param Integer $targetSqlType
	* @return void
	*/
	function setObject($index, $value, $targetSqlType){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given REF(<structured-type>) value
	* @param Integer $index
	* @param Ref $value
	* @return void
	*/
	function setRef($index, $value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given java.sql.RowId object
	* @param Integer $index
	* @param RowId $value
	* @return void
	*/
	function setRowId($index, $value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given Java short value
	* @param Integer $index
	* @param Integer $value
	* @return void
	*/
	function setShort($index, $value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given java.sql.SQLXML object
	* @param Integer $index
	* @param SQLXML $value
	* @return void
	*/
	function setSQLXML($index, $value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given Java String value
	* @param Integer $index
	* @param String $value
	* @return void
	*/
	function setString($index, $value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given java.sql.Time value
	* @param Integer $index
	* @param Time $value
	* @return void
	*/
	function setTime($index, $value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given java.sql.Timestamp value
	* @param Integer $index
	* @param Timestamp $value
	* @return void
	*/
	function setTimestamp($index, $value){
		die('Not implemented');
	}

 	/**
	* Sets the designated parameter to the given java.net.URL value
	* @param Integer $index
	* @param URL $value
	* @return void
	*/
	function setURL($index, $value){
		die('Not implemented');
	}
}
?>