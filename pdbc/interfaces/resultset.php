<?php
/*
* @author Jonas Raoni
* @url https://github.com/jonasraoni/php-jdbc
* @version $Id: resultset.php,v 1.0 2006/05/09 18:58:07
* @abstract A table of data representing a database result set, which is usually generated by executing a statement that queries the database
*/

class ResultSet{
	/**
	* Class constructor
	* @param Statement $statement
	* @param Resource $result
	*/
	function ResultSet(&$statement, $result){
		die('Not implemented');
	}

	/**
	* Moves the cursor to the given row number in this ResultSet object
	* @param Integer $row
	* @return Boolean
	*/
	function absolute($row){
		die('Not implemented');
	}

	/**
	* Moves the cursor to the end of this ResultSet object, just after the last row.
	* @return void
	*/
	function afterLast(){
		die('Not implemented');
	}

	/**
	* Moves the cursor to the front of this ResultSet object, just before the first row
	* @return void
	*/
	function beforeFirst(){
		die('Not implemented');
	}

	/**
	* Cancels the updates made to the current row in this ResultSet object
	* @return void
	*/
	function cancelRowUpdates(){
		die('Not implemented');
	}

	/**
	* Clears all warnings reported on this ResultSet object
	* @return void
	*/
	function clearWarnings(){
		die('Not implemented');
	}

	/**
	* Releases this ResultSet object's database and JDBC resources immediately instead of waiting for this to happen when it is automatically closed
	* @return void
	*/
	function close(){
		die('Not implemented');
	}

	/**
	* Deletes the current row from this ResultSet object and from the underlying database
	* @return void
	*/
	function deleteRow(){
		die('Not implemented');
	}

	/**
	* Maps the given ResultSet column name to its ResultSet column index
	* @param String $columnName
	* @return Integer
	*/
	function findColumn($columnName){
		die('Not implemented');
	}

	/**
	* Moves the cursor to the first row in this ResultSet object
	* @return Boolean
	*/
	function first(){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as an Array object in the Java programming language
	* @param Integer/String $column
	* @return void
	*/
	function getArray($column){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a stream of ASCII characters
	* @param Integer/String $column
	* @return InputStream
	*/
	function &getAsciiStream($column){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a java.math.BigDecimal with full precision
	* @param Integer/String $column
	* @return BigDecimal
	*/
	function &getBigDecimal($column){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a stream of uninterpreted bytes
	* @param Integer/String $column
	* @return InputStream
	*/
	function &getBinaryStream($column){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a Blob object in the Java programming language
	* @param Integer/String $column
	* @return Blob
	*/
	function &getBlob($column){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a boolean in the Java programming language
	* @param Integer/String $column
	* @return Boolean
	*/
	function getBoolean($column){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a byte in the Java programming language
	* @param Integer/String $column
	* @return Integer
	*/
	function getByte($column){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a byte array in the Java programming language
	* @param Integer/String $column
	* @return Integer[]
	*/
	function getBytes($column){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object
	* @param Integer/String $column
	* @return Reader
	*/
	function &getCharacterStream($column){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a Clob object in the Java programming language
	* @param Integer/String $column
	* @return Clob
	*/
	function &getClob($column){
		die('Not implemented');
	}

	/**
	* Retrieves the concurrency mode of this ResultSet object
	* @return void
	*/
	function getConcurrency(){
		die('Not implemented');
	}

	/**
	* Retrieves the name of the SQL cursor used by this ResultSet  object
	* @return String
	*/
	function getCursorName(){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language
	* @param Integer/String $column
	* @return Date
	*/
	function &getDate($column){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a double in the Java programming language
	* @param Integer/String $column
	* @return Float
	*/
	function getDouble($column){
		die('Not implemented');
	}

	/**
	* Retrieves the fetch direction for this ResultSet object
	* @return Integer
	*/
	function getFetchDirection(){
		die('Not implemented');
	}

	/**
	* Retrieves the fetch size for this ResultSet object
	* @return Integer
	*/
	function getFetchSize(){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a float in the Java programming language
	* @param Integer/String $column
	* @return Float
	*/
	function getFloat($column){
		die('Not implemented');
	}

	/**
	* Retrieves the holdability of this ResultSet object
	* @return Integer
	*/
	function getHoldability(){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as an int in the Java programming language
	* @param Integer/String $column
	* @return Integer
	*/
	function getInt($column){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a long in the Java programming language
	* @param Integer/String $column
	* @return Integer
	*/
	function getLong($column){
		die('Not implemented');
	}

	/**
	* Retrieves the number, types and properties of this ResultSet object's columns
	* @return ResultSetMetaData
	*/
	function &getMetaData(){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object
	* @param Integer/String $column
	* @return Reader
	*/
	function &getNCharacterStream($column){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a NClob object in the Java programming language
	* @param Integer/String $column
	* @return NClob
	*/
	function &getNClob($column){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language
	* @param Integer/String $column
	* @return String
	*/
	function getNString($column){
		die('Not implemented');
	}

	/**
	* Gets the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language
	* @param Integer/String $column
	* @param Map $map
	* @return Object
	*/
	function &getObject($column, $map = null){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a Ref object in the Java programming language
	* @param Integer/String $column
	* @return Ref
	*/
	function &getRef($column){
		die('Not implemented');
	}

	/**
	* Retrieves the current row number
	* @return Integer
	*/
	function getRow(){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.RowId object in the Java programming language
	* @param Integer/String $column
	* @return RowId
	*/
	function &getRowId($column){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a short in the Java programming language
	* @param Integer/String $column
	* @return Integer
	*/
	function getShort($column){
		die('Not implemented');
	}


	/**
	* Retrieves the value of the designated column in the current row of this ResultSet as a java.sql.SQLXML object in the Java programming language
	* @param Integer/String $column
	* @return SQLXML
	*/
	function &getSQLXML($column){
		die('Not implemented');
	}

	/**
	* Retrieves the Statement object that produced this ResultSet object
	* @return Statement
	*/
	function &getStatement(){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language
	* @param Integer/String $column
	* @return String
	*/
	function getString($column){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a Time object in the Java programming language
	* @param Integer/String $column
	* @return Time
	*/
	function &getTime($column){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language
	* @param Integer/String $column
	* @return Timestamp
	*/
	function &getTimestamp($column){
		die('Not implemented');
	}

	/**
	* Retrieves the type of this ResultSet object
	* @param Integer/String $column
	* @return Integer
	*/
	function getType(){
		die('Not implemented');
	}

	/**
	* Retrieves the value of the designated column in the current row of this ResultSet object as a java.net.URL  object in the Java programming language
	* @param Integer/String $column
	* @return URL
	*/
	function &getURL($column){
		die('Not implemented');
	}

	/**
	* Retrieves the first warning reported by calls on this ResultSet object
	* @return SQLWarning
	*/
	function &getWarnings(){
		die('Not implemented');
	}

	/**
	* Inserts the contents of the insert row into this ResultSet object and into the database
	* @return Boolean
	*/
	function insertRow(){
		die('Not implemented');
	}

	/**
	* Retrieves whether the cursor is after the last row in this ResultSet object
	* @return Boolean
	*/
	function isAfterLast(){
		die('Not implemented');
	}

	/**
	* Retrieves whether the cursor is before the first row in this ResultSet object
	* @return Boolean
	*/
	function isBeforeFirst(){
		die('Not implemented');
	}

	/**
	* Retrieves whether this ResultSet object has been closed
	* @return Boolean
	*/
	function isClosed(){
		die('Not implemented');
	}

	/**
	* Retrieves whether the cursor is on the first row of this ResultSet object
	* @return Boolean
	*/
	function isFirst(){
		die('Not implemented');
	}

	/**
	* Retrieves whether the cursor is on the last row of this ResultSet object
	* @return Boolean
	*/
	function isLast(){
		die('Not implemented');
	}

	/**
	* Moves the cursor to the last row in this ResultSet object
	* @return Boolean
	*/
	function last(){
		die('Not implemented');
	}

	/**
	* Moves the cursor to the remembered cursor position, usually the current row
	* @return void
	*/
	function moveToCurrentRow(){
		die('Not implemented');
	}

	/**
	* Moves the cursor to the insert row
	* @return void
	*/
	function moveToInsertRow(){
		die('Not implemented');
	}

	/**
	* Moves the cursor froward one row from its current position
	* @return Boolean
	*/
	function next(){
		die('Not implemented');
	}

	/**
	* Moves the cursor to the previous row in this ResultSet object
	* @return Boolean
	*/
	function previous(){
		die('Not implemented');
	}

	/**
	* Refreshes the current row with its most recent value in the database
	* @return void
	*/
	function refreshRow(){
		die('Not implemented');
	}

	/**
	* Moves the cursor a relative number of rows, either positive or negative
	* @param Integer $rows
	* @return Boolean
	*/
	function relative($rows){
		die('Not implemented');
	}

	/**
	* Retrieves whether a row has been deleted
	* @return Boolean
	*/
	function rowDeleted(){
		die('Not implemented');
	}

	/**
	* Retrieves whether the current row has had an insertion
	* @return Boolean
	*/
	function rowInserted(){
		die('Not implemented');
	}

	/**
	* Retrieves whether the current row has been updated
	* @return Boolean
	*/
	function rowUpdated(){
		die('Not implemented');
	}

	/**
	* Gives a hint as to the direction in which the rows in this ResultSet object will be processed
	* @param Integer $direction
	* @return void
	*/
	function setFetchDirection($direction){
		die('Not implemented');
	}

	/**
	* Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed for this ResultSet object
	* @param Integer $rows
	* @return void
	*/
	function setFetchSize($rows){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a java.sql.Array value
	* @param Integer/String $column
	* @param Array $value
	* @return void
	*/
	function updateArray($column, $value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with an ascii stream value, which will have the specified number of bytes
	* @param Integer/String $column
	* @param InputStream $value
	* @param Integer $length
	* @return void
	*/
	function updateAsciiStream($column, &$value, $length){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a java.math.BigDecimal value
	* @param Integer/String $column
	* @param BigDecimal $value
	* @return void
	*/
	function updateBigDecimal($column, &$value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a binary stream value, which will have the specified number of bytes
	* @param Integer/String $column
	* @param InputStream $value
	* @param Integer $length
	* @return void
	*/
	function updateBinaryStream($column, &$value, $length){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a java.sql.Blob value
	* @param Integer/String $column
	* @param Blob $value
	* @return void
	*/
	function updateBlob($column, &$value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a boolean value
	* @param Integer/String $column
	* @param Boolean $value
	* @return void
	*/
	function updateBoolean($column, $value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a byte value
	* @param Integer/String $column
	* @param Integer $value
	* @return void
	*/
	function updateByte($column, $value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a byte array value
	* @param Integer/String $column
	* @param Integer[] $value
	* @return void
	*/
	function updateBytes($column, $value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a character stream value, which will have the specified number of bytes
	* @param Integer/String $column
	* @param Reader $value
	* @param Integer $length
	* @return void
	*/
	function updateCharacterStream($column, &$value, $length){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a java.sql.Clob value
	* @param Integer/String $column
	* @param Clob $value
	* @return void
	*/
	function updateClob($column, &$value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a java.sql.Date value
	* @param Integer/String $column
	* @param Date $value
	* @return void
	*/
	function updateDate($column, &$value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a double value
	* @param Integer/String $column
	* @param Float $value
	* @return void
	*/
	function updateDouble($column, $value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a float  value
	* @param Integer/String $column
	* @param Float $value
	* @return void
	*/
	function updateFloat($column, $value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with an int value
	* @param Integer/String $column
	* @param Integer $value
	* @return void
	*/
	function updateInt($column, $value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with an int value
	* @param Integer/String $column
	* @param Integer $value
	* @return void
	*/
	function updateLong($column, $value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a character stream value, which will have the specified number of bytes
	* @param Integer/String $column
	* @param Reader $value
	* @param Integer $length
	* @return void
	*/
	function updateNCharacterStream($column, &$value, $length){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a java.sql.NClob value
	* @param Integer/String $column
	* @param NClob $value
	* @return void
	*/
	function updateNClob($column, &$value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a String value
	* @param Integer/String $column
	* @param String $value
	* @return void
	*/
	function updateNString($column, $value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a null value
	* @param Integer/String $column
	* @return void
	*/
	function updateNull($column){
		die('Not implemented');
	}

	/**
	* Updates the designated column with an Object value
	* @param Integer/String $column
	* @param Object $value
	* @return void
	*/
	function updateObject($column, &$value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a java.sql.Ref value
	* @param Integer/String $column
	* @param Ref $value
	* @return void
	*/
	function updateRef($column, &$value){
		die('Not implemented');
	}

	/**
	* Updates the underlying database with the new contents of the current row of this ResultSet object
	* @return void
	*/
	function updateRow(){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a RowId value
	* @param Integer/String $column
	* @param RowId $value
	* @return void
	*/
	function updateRowId($column, &$value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a short value
	* @param Integer/String $column
	* @param Integer $value
	* @return void
	*/
	function updateShort($column, $value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a java.sql.SQLXML value
	* @param Integer/String $column
	* @param SQLXML $value
	* @return void
	*/
	function updateSQLXML($column, &$value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a String value
	* @param Integer/String $column
	* @param String $value
	* @return void
	*/
	function updateString($column, $value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a java.sql.Time value
	* @param Integer/String $column
	* @param Time $value
	* @return void
	*/
	function updateTime($column, &$value){
		die('Not implemented');
	}

	/**
	* Updates the designated column with a java.sql.Timestamp  value
	* @param Integer/String $column
	* @param Timestamp $value
	* @return void
	*/
	function updateTimestamp($column, &$value){
		die('Not implemented');
	}

	/**
	* Reports whether the last column read had a value of SQL NULL
	* @return void
	*/
	function wasNull(){
		die('Not implemented');
	}

}
?>