<?php
/*
* @author Jonas Raoni
* @url https://github.com/jonasraoni/php-jdbc
* @version $Id: statement.php,v 1.0 2006/05/14 18:58:07
* @abstract MySQL Statement
*/

require_once PDBC_INTERFACES . 'statement.php';

class MySQLStatement extends Statement{
	var $_maxFieldSize = 0;
	var $_maxRows = 0;
	var $_fetchSize = 0;
	var $_queryTimeout = 0;
	var $_escapeProcessing = false;
	var $_currentResultShared = false;
	var $_cursorName = '';
	var $_fetchDirection = FETCH_FORWARD;
	var $_batch = array();
	var $_queries = array();
	var $_resultSets = array();
	var $_connection;
	var $_handle = null;
	var $_SQLWarning;
	var $_resultSetType;
	var $_resultSetConcurrency;
	var $_resultSetHoldability;

	function __destruct(){
		$this->close();
	}

	function &MySQLStatement(&$connection, $resultSetType, $resultSetConcurrency, $resultSetHoldability){
		$this->_connection = &$connection;
		$this->_handle = $this->_connection->_handle;
		$this->_resultSetType = $resultSetType;
		$this->_resultSetConcurrency = $resultSetConcurrency;
		$this->_resultSetHoldability = $resultSetHoldability;
		return $this;
	}

	function execute($sql, $autoGeneratedKeysOrColumnIndexesOrNames = null){
		if(is_int($autoGeneratedKeysOrColumnIndexesOrNames) && $autoGeneratedKeysOrColumnIndexesOrNames != RETURN_GENERATED_KEYS  && $autoGeneratedKeysOrColumnIndexesOrNames != NO_GENERATED_KEYS)
			return PDBCException::throwIt(new SQLException('Unrecognized value for the autoGenerateKeys argument'));
		if($this->_queryTimeout > 0)
			$start = time();
		$this->clearWarnings();
		if(false === ($q = mysql_query($this->_escapeProcessing ? mysql_real_escape_string($sql, $this->_handle) : $sql, $this->_handle)))
			return PDBCException::throwIt(new SQLException(mysql_error($this->_handle), '', mysql_errno($this->_handle)));
		if($this->_queryTimeout > 0 && $start + $this->_queryTimeout * 1e3 > time()){
			require_once PDBC_EXCEPTIONS . 'sql-timeout-exception.php';
			return PDBCException::throwIt(new SQLTimeoutException('Query timed out'));
		}
		$this->_queries[] = array($q, mysql_affected_rows($this->_handle));
		$this->_currentResultShared = false;
		return $q !== true;
	}

	function &executeQuery($sql){
		$exec = $this->execute($sql);
		if($x = &PDBCException::catchIt('SQLException')){
			PDBCException::throwIt($x);
			return $null;
		}
		if($exec){
			$rs = &$this->getResultSet();
			return $rs;
		}
		PDBCException::throwIt(new SQLException('The query didn\'t returned a valid resultset'));
	}

	function executeUpdate($sql, $autoGeneratedKeysOrColumnIndexesOrNames = null){
		$exec = $this->execute($sql, $autoGeneratedKeysOrColumnIndexesOrNames);
		if($x = &PDBCException::catchIt('SQLException'))
			return PDBCException::throwIt($x);
		if(!$exec)
			return $this->getUpdateCount();
		PDBCException::throwIt(new SQLException('The query returned a resultset'));
	}

	function close(){
		for($i = count($this->_resultSets); $i; $this->_resultSets[--$i]->close());
		$this->_resultSets = array();
		foreach($this->_queries as $q)
			is_resource($q) && mysql_free_result($q);
		$this->_queries = array();
	}

	function getMaxFieldSize(){
		return $this->_maxFieldSize;
	}

	function setMaxFieldSize($max){
		if($max < 0)
			PDBCException::throwIt(new SQLException('Invalid value for max'));
		else
			$this->_maxFieldSize = $max;
	}

	function getMaxRows(){
		return $this->_maxRows;
	}

	function setEscapeProcessing($enable){
		$this->_escapeProcessing = !!$enable;
	}

	function getQueryTimeout(){
		return $this->_queryTimeout;
	}

	function setQueryTimeout($seconds){
		if($seconds < 0)
			PDBCException::throwIt(new SQLException('Invalid value for seconds'));
		else
			$this->_queryTimeout = $seconds;
	}

	function cancel(){
		require_once PDBC_EXCEPTIONS . 'sql-feature-not-supported-exception.php';
		PDBCException::throwIt(new SQLFeatureNotSupportedException('Cancelling statements isn\'t supported'));
	}

	function &getWarnings(){
		if($this->isClosed())
			PDBCException::throwIt(new SQLException('This method cannot be called on a closed statement'));
		else
			return $this->_SQLWarning;
	}

	function clearWarnings(){
		unset($this->_SQLWarning);
		$this->_SQLWarning = null;
	}

	function setCursorName($name){
		require_once PDBC_EXCEPTIONS . 'sql-feature-not-supported-exception.php';
		PDBCException::throwIt(new SQLFeatureNotSupportedException('Cursors aren\'t supported'));
	}

	function &getResultSet(){
		require_once PDBC_MYSQL_DRIVER . 'resultset.php';
		$last = end($this->_queries);
		if(!is_resource($q = $last[0]))
			return $null;
		$this->_currentResultShared = true;
		$this->getMoreResults(KEEP_CURRENT_RESULT);
		$result = &new MySQLResultSet($this, $q, $this->_fetchDirection, $this->_fetchSize);
		$this->_resultSets[] = &$result;
		return $result;
	}

	function getUpdateCount(){
		$last = end($this->_queries);
		if(!($q = $last[0]) || is_resource($q))
			return -1;
		$this->getMoreResults(KEEP_CURRENT_RESULT);
		return $last[1];
	}

	function getMoreResults($current = CLOSE_CURRENT_RESULT){
		if($current != CLOSE_CURRENT_RESULT && $current != KEEP_CURRENT_RESULT && $current != CLOSE_ALL_RESULTS)
			return PDBCException::throwIt(new SQLException('Unrecognized value for the current argument'));
		$last = array_pop($this->_queries);
		if($q = $last[0]){
			if($q !== true && !$this->_currentResultShared)
				mysql_free_result($q);
			$last = end($this->_queries);
			$q = $last[0];
		}
		$this->_currentResultShared = false;
		if($current != KEEP_CURRENT_RESULT && ($i = count($results = array_splice($this->_resultSets, $current == CLOSE_CURRENT_RESULT ? count($this->_resultSets) - 1 : 0))))
			for(; $i; $results[--$i]->close());
		return $q && $q !== true;
	}

	function setFetchDirection($direction){
		if($direction != FETCH_FORWARD && $direction != FETCH_REVERSE && $direction != FETCH_UNKNOWN)
			PDBCException::throwIt(new SQLException('Unrecognized fetch direction'));
		else
			$this->_fetchDirection = $direction;
	}

	function getFetchDirection(){
		return $this->_fetchDirection;
	}

	function setFetchSize($rows){
		if($rows < 0)
			PDBCException::throwIt(new SQLException('Invalid value for the rows argument'));
		else
			$this->_fetchSize = $rows;
	}

	function getFetchSize(){
		return $this->_fetchSize;
	}

	function getResultSetConcurrency(){
		return $this->_resultSetConcurrency;
	}

	function getResultSetType(){
		return $this->_resultSetType;
	}

	function addBatch($sql){
		$this->_batch[] = $sql;
	}

	function clearBatch(){
		$this->_batch = array();
	}

	function executeBatch(){
		$results = array();
		foreach($this->_batch as $sql){
			$exec = $this->execute($sql);
			if($x = PDBCException::catchIt('SQLException')){
				require_once PDBC_EXCEPTIONS . 'batch-update-exception.php';
				$results[] = EXECUTE_FAILED;
				return PDBCException::throwIt(new BatchUpdateException($results, mysql_error($this->_handle), '', mysql_errno($this->_handle)));
			}
			if($exec){
				$results[] = SUCCESS_NO_INFO;
				$this->getMoreResults(KEEP_CURRENT_RESULT);
			}
			else
				$results[] = $this->getUpdateCount();

		}
		return $results;
	}

	function &getConnection(){
		return $this->_connection;
	}

	function &getGeneratedKeys(){
		PDBCException::throwIt(new SQLException('Not implemented'));
	}

	function getResultSetHoldability(){
		return $this->_resultSetHoldability;
	}

	function isClosed(){
		return !count($this->_queries) && !count($_resultSets);
	}
}
?>